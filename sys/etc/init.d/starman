#!/bin/bash

# This file was created and transferred by puppet
# Do not edit manually!
# puppet:modules/starman/templates/init.d/starman

# Start/stop the starman daemon.
#
### BEGIN INIT INFO
# Provides:             starman
# Short-Description:    Start/stop starman web server
# Description:          Starman is an excellent daemon for running plack applications.
#                       Speaks PSGI to your catalyst application
#                       It will also refuse to restart your application if it does not compile
### END INIT INFO

source /vhosts/perl5/perlbrew/etc/bashrc

# psgi defaults
APPDIR="/vhosts"
PSGIAPP="$APPDIR/app.psgi"

# starman defaults
NAME=starman_app
DAEMON=/vhosts/perl5/perlbrew/perls/perl-5.14.2/bin/starman
WORKERS=4
PORT=5000
PIDDIR=/tmp
PIDFILE=$PIDDIR/${NAME}.pid

test -f ${DAEMON} || exit 0

. /lib/lsb/init-functions

if [ ! $WORKERS ]; then
    echo "\$WORKERS is not defined"
    exit 1
fi

if [ ! $PORT ]; then
    echo "\$PORT is not defined"
    exit 1
fi

if [ ! -d $APPDIR ]; then
    echo "$APPDIR does not exist"
    exit 1
fi

STARMAN="$DAEMON -- $PSGIAPP --workers $WORKERS --pid $PIDFILE --port $PORT --daemonize --user web --group vhosts"
#STARMAN="$DAEMON -- $PSGIAPP --workers $WORKERS --pid $PIDFILE --port $PORT --preload-app --daemonize --user web --group vhosts"

check_running() {
    [ -s $PIDFILE ] && kill -0 $(cat $PIDFILE) >/dev/null 2>&1
}

check_compile() {
    perl -c $PSGIAPP || return 0
}

_start() {

  echo "Starting $PSGIAPP, pidfile $PIDFILE..."

  /sbin/start-stop-daemon --start --pidfile $PIDFILE \
  --chdir $APPDIR -c web --startas $STARMAN

  echo ""
  echo "Waiting for $NAME to start..."

  for i in 1 2 3 4 ; do
    sleep 1
    if check_running ; then
      echo "$NAME is now starting up"
      return 0
    fi
  done

  # sometimes it takes two tries.
  echo "Failed. Trying again..."
  /sbin/start-stop-daemon --start --pidfile $PIDFILE \
  --chdir $APPDIR --startas $STARMAN

  for i in 1 2 3 4 ; do
    sleep 1
    if check_running ; then
      echo "$NAME is now starting up"
      return 0
    fi
  done

  return 1
}

start() {
    log_daemon_msg "Starting" $NAME
    echo ""

    if check_running; then
        log_progress_msg "already running"
        log_end_msg 0
        exit 0
    fi

    rm -f $PIDFILE 2>/dev/null

    _start
    log_end_msg $?
    return $?
}

stop() {
    log_daemon_msg "Stopping" $NAME
    echo ""

    /sbin/start-stop-daemon --stop --oknodo --pidfile $PIDFILE
    sleep 3
    log_end_msg $?
    return $?
}

restart() {
    log_daemon_msg "Restarting" $NAME
    echo ""

    check_compile 
    if [ $? != 0 ] ; then
        log_failure_msg "Error detected; not restarting."
        log_end_msg 1
        exit 1
    fi

    /sbin/start-stop-daemon --stop --oknodo --pidfile $PIDFILE
    _start
    log_end_msg $?
    return $?
}

reload() {
    log_daemon_msg "Reloading" $NAME
    echo ""

    if [ $? != 0 ] ; then
       log_failure_msg "Error detected; not reloading."
       log_end_msg 1
       exit 1
    fi

    /sbin/start-stop-daemon --stop --signal HUP --oknodo --pidfile $PIDFILE
    log_end_msg $?
    return $?
}

# See how we were called.
case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart|force-reload)
        restart
    ;;
    reload)
        reload
    ;;
    check_compile)
	check_compile
    ;;
    *)
        echo $"Usage: $0 {start|stop|restart|reload|check_compile}"
        exit 1
esac
exit $?
